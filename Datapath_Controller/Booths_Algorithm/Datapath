module Booths_Datapath(
    output reg [2*N-1:0] product,
    input [N-1:0] multiplicand,
    input [N-1:0] multiplier,
    input clk,
    input reset,
    input load,
    input shift,
    input add_subtract
);
    parameter N = 8; // Bit width of multiplicand and multiplier
    
    reg [N:0] A, Q;
    reg Q_1;
    reg [N-1:0] M;
    reg [N:0] MQ;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            A <= 0;
            Q <= 0;
            Q_1 <= 0;
            M <= 0;
            MQ <= 0;
            product <= 0;
        end else if (load) begin
            M <= multiplicand;
            Q <= multiplier;
            Q_1 <= 0;
            A <= 0;
        end else if (shift) begin
            MQ = {A, Q[N-1:0], Q_1};
            MQ = MQ >> 1;
            {A, Q[N-1:0], Q_1} = MQ;
        end else if (add_subtract) begin
            if (Q[0] == 1 && Q_1 == 0) begin
                A = A - {1'b0, M};
            end else if (Q[0] == 0 && Q_1 == 1) begin
                A = A + {1'b0, M};
            end
        end
        product <= {A, Q[N-1:0]};
    end
endmodule

