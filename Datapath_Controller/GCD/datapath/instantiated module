module gcd_datapath (
    input clk,
    input reset,
    input [15:0] A_in,        // Input A
    input [15:0] B_in,        // Input B
    input start,              // Start signal
    input subtract_enable,    // Enable subtraction
    input replace_A,          // Replace A with the difference
    input replace_B,          // Replace B with the difference
    output reg [15:0] result, // GCD result
    output reg done           // Done signal when GCD is found
);

    reg [15:0] A, B;          // Registers for A and B
    wire [15:0] diff;         // Difference from subtractor
    wire A_greater_than_B, B_greater_than_A; // Comparator signals
    
    // Instantiate Subtractor
    subtractor subtractor_unit (
        .A(A),
        .B(B),
        .diff(diff)
    );

    // Instantiate Comparator
    comparator comparator_unit (
        .A(A),
        .B(B),
        .A_greater_than_B(A_greater_than_B),
        .B_greater_than_A(B_greater_than_A)
    );

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            A <= 16'b0;
            B <= 16'b0;
            result <= 16'b0;
            done <= 0;
        end else if (start) begin
            if (subtract_enable) begin
                if (replace_A) begin
                    A <= diff;  // Update A with the difference
                end
                if (replace_B) begin
                    B <= diff;  // Update B with the difference
                end
            end
        end
    end

    always @(posedge clk) begin
        if (A == 0) begin
            result <= B;  // If A is 0, GCD is B
            done <= 1;    // GCD calculation is done
        end else if (B == 0) begin
            result <= A;  // If B is 0, GCD is A
            done <= 1;    // GCD calculation is done
        end
    end
endmodule

