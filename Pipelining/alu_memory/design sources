module alu_mem(z,rs1,rs2,rd,func,addr,clk1,clk2);
input [3:0]rs1,rs2,rd,func;
input [7:0]addr;
output [7:0]z;
input clk1,clk2;

reg[15:0]regbank[15:0];
reg [15:0]mem[255:0];

reg[15:0]ls12_a,ls12_b,l23_z,l34_z;
reg[3:0]ls12_rd,ls12_func,l23_rd,l23_addr;
reg[7:0]ls12_addr,ls23_addr,l34_addr;
always@(posedge clk1)
begin
ls12_a<=regbank[rs1];
ls12_b<=regbank[rs2];
ls12_rd<=rd;
ls12_func<=func;
ls12_addr<=addr;
end
always@(negedge clk2)
begin
case(func)
0:l23_z<=ls12_a+ls12_b;
1:l23_z<=ls12_a-ls12_b;
2:l23_z<=ls12_a*ls12_b;
3:l23_z<=ls12_a;
4:l23_z<=ls12_b;
5:l23_z<=(ls12_a) & (ls12_b);
6:l23_z<=ls12_a|ls12_b;
7:l23_z<=ls12_a^ls12_b;
8:l23_z<=~ls12_a;
9:l23_z<=~ls12_b;
10:l23_z<=ls12_a>>1;
11:l23_z<=ls12_a<<1;
endcase
l23_rd<=ls12_rd;
l23_addr<=ls12_addr;
end
always@(posedge clk1)
begin
regbank[l23_rd]<=l23_z;
l34_z<=l23_z;
l34_addr<=l23_addr;
end
always@(negedge clk2)
begin
mem[l34_addr]<=l34_z;
end
endmodule
